= semantic_form_for @event do |f|
  - if @event.new_record?
    = f.inputs t('events.forms.labels.existing') do
      %li
        = label_tag 'create_from_existing', t('events.forms.labels.create_from_existing')
        = text_field_tag :create_from_existing, nil, class: :typeahead

  = f.inputs name: t('events.forms.labels.information') do
    = f.input :non_billig_title_no, label: t('events.forms.labels.title_no')
    = f.input :title_en, label: t('events.forms.labels.title_en')
    = f.input :short_description_no, label: t('events.forms.labels.short_description_no'), input_html: { rows: 2 }
    = f.input :short_description_en, label: t('events.forms.labels.short_description_en'), input_html: { rows: 2 }
    = f.input :long_description_no, label: t('events.forms.labels.long_description_no'), hint: t('common.markdown_hint').html_safe
    = f.input :long_description_en, label: t('events.forms.labels.long_description_no'), hint: t('common.markdown_hint').html_safe
    = f.input :event_type, label: t('events.forms.labels.event_type'), as: :select, collection: Event::EVENT_TYPE.map { |k| [t("events.#{k}"), k] }
    = f.input :age_limit, label: t('events.forms.labels.age_limit'), as: :select, collection: Event::AGE_LIMIT.map { |k| [t("events.#{k}").html_safe, k] }
    = f.input :area, label: t('events.forms.labels.area')
    = f.input :status, label: t('events.forms.labels.status'), as: :select, collection: Event::STATUS.map { |k| [t("events.#{k}"), k]}
  = render 'images/imagepicker', f: f

  = f.inputs name: t('events.forms.labels.banner_styling') do
    = f.input :primary_color, label: t('events.forms.labels.primary_color'), as: :color, input_html: { value: f.object.primary_color || '#000000' }
    = f.input :secondary_color, label: t('events.forms.labels.secondary_color'), as: :color, input_html: { value: f.object.secondary_color || '#ffffff' }

    = f.input :banner_alignment, label: t('events.forms.labels.banner_alignment'), as: :select, collection: Event::BANNER_ALIGNMENT.map { |k| [t("events.#{k}"), k]}

  = f.inputs name: t('events.organizer') do
    %li
      = f.label :organizer_type, value: Group.name do
        = t('events.organizers.group')
        = f.radio_button :organizer_type, Group.name, checked: true
      = f.select :organizer_group_id, Group.all.map { |g| [g.name, g.id] }
    %li
      = f.label :organizer_type, value: ExternalOrganizer.name do
        = t('events.organizers.external')
        = f.radio_button :organizer_type, ExternalOrganizer.name
      = f.text_field :organizer_external_name
      %datalist#external_organizers
        - ExternalOrganizer.order(:name).each do |o|
          %option{ value: o.name }

  = f.inputs name: t('events.forms.labels.datetime') do
    = f.input :non_billig_start_time, label: t('events.forms.labels.start_time'), input_html: { class: "datetimepicker", value: @event.non_billig_start_time}, as: :string
    = f.input :duration, label: t('events.forms.labels.duration'), input_html: { type: 'number' }
    = f.input :publication_time, label: t('events.forms.labels.publication_time'), input_html: { class: "datetimepicker", value: @event.publication_time}, as: :string

  = f.inputs name: t('events.forms.labels.social') do
    = f.input :spotify_uri, hint: t('events.forms.labels.spotify_description')
    = f.input :facebook_link
    = f.input :youtube_link, hint: t('events.forms.labels.youtube_description')
    = f.input :youtube_embed, hint: t('events.forms.labels.youtube_embed_description')
    = f.input :soundcloud_link
    = f.input :instagram_link
    = f.input :twitter_link
    = f.input :lastfm_link
    = f.input :vimeo_link
    = f.input :general_link

  = f.inputs name: t('events.forms.labels.pricing_options') do
    %li
      = f.label :price_type, value: "free" do
        = t('events.forms.labels.free')
        = f.radio_button :price_type, "free", checked: true
    %li
      = f.label :price_type, value: "included" do
        = t('events.forms.labels.included')
        = f.radio_button :price_type, "included", checked: true
    %li
      = f.label :price_type, value: "custom" do
        = t('events.forms.labels.custom')
        = f.radio_button :price_type, "custom"
      .nested-fields
        = f.semantic_fields_for :price_groups do |pg|
          = pg.inputs do
            = render 'price_group_fields', f: pg
        = link_to_add_association t('events.add_price_group'), f, :price_groups

    %li
      = f.label :price_type, value: "billig" do
        = "billig"
        = f.radio_button :price_type, "billig"
      = f.input :billig_event_id, as: :select, collection: BilligEvent.sale_applicable.sort_by(&:event_time).map { |e| [e.describe, e.id] }, include_blank: false

  = f.actions do
    = f.action :submit
